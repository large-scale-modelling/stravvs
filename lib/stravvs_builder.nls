;## INPUTS

;--- read init file ----------------
; read-inits()
; Input files contain all the parameter values needed to run the code. Anything 
; not specified will take the value of the GUI. Alternatively, parameters can be specified
; in the GUI
to read-inits 
  ;ca
  ;set error-state? false
  
  file-close-all
  
  file-open init-file
  let line-number 0
  while [ not file-at-end? ] [
    let line file-read-line      ;; read the line into a string
    if (first line) != "#" [     ; skip any comments
      set line-number line-number + 1
      let data csv:from-row line ; read line from file
      
      let variable-name item 0 data
      let variable-value item 1 data
      
      let command []
      (ifelse is-number? variable-value [
        set command (word "set " variable-name " " variable-value)
      ] is-string? variable-value [
        set command (word "set " variable-name " (word \"" variable-value "\")")        
        if variable-value = "TRUE" OR variable-value = "true" [
          set command (word "set " variable-name " TRUE")        
        ]
        if variable-value = "FALSE" OR variable-value = "false" [
          set command (word "set " variable-name " FALSE")        
        ]
      ] is-boolean? variable-value [
        set command (word "set " variable-name " " variable-value)
      ][
        error (word "Unknown input variable type for " variable-name " " variable-value)
      ])
      
      run command
    ]
  ]
  file-close
end

;--- Start up ----------------------
;; can't put these earlier than build-world because resizing the world
;; kills all turtles!

; big-bang() 
;read in all appropriate files
to big-bang  
  ; read products
  read-products product-attributes  
  ; read yields file
  read-yields
  
  ; read equations
  read-equations  
  ; initialise table for case-based reasoning
  set global-case-base make-case-base "global"
  
  ; link metaprocesses to their respective processes
  join-meta-equations
  ; link yields to processes
  join-yields-processes
  
  ask products [
    let me product-type
    if NOT any? products with [product-type = me AND shelflife = "archetype"] [
      ; generate empty archetype for anything not seeded in equations
      ; generate-components me 0
    ]    
  ]
  
  ; populate product-types table with the inputs/outputs for each product
  product-table 
  ;print product-types
  ;check that products are in both the equations and attributes files
  check-products
end

;--- World building ----------------
; build-world() 
; build the world space and create the world
to build-world 
  (ifelse world = "scotland" [    
    ;resize-world -107 583 530 1220 ;must include (0,0)
    ;set-patch-size 1;1.3 * 32
    big-bang
    build-map
    
  ] [
    	error (word "World Builder not recognised [STRAVVS kilda socialsim tiny]")
  ])
end
